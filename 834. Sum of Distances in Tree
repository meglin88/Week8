from collections import defaultdict

class Solution:
    def sumOfDistancesInTree(self, n, edges):
        tree = defaultdict(list)
        for u, v in edges:
            tree[u].append(v)
            tree[v].append(u)

        res = [0] * n      # 儲存答案
        count = [1] * n    # 每個子樹節點數，初始為1（包含自己）

        # 第一次 DFS：從 0 開始，計算 res[0] 和每個節點的子樹大小
        def dfs(node, parent):
            for nei in tree[node]:
                if nei != parent:
                    dfs(nei, node)
                    count[node] += count[nei]
                    res[node] += res[nei] + count[nei]

        # 第二次 DFS：根據父節點的 res 推算子節點的 res
        def dfs2(node, parent):
            for nei in tree[node]:
                if nei != parent:
                    res[nei] = res[node] - count[nei] + (n - count[nei])
                    dfs2(nei, node)

        dfs(0, -1)
        dfs2(0, -1)
        return res
